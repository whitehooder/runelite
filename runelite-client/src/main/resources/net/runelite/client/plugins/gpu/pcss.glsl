/*
 * Copyright (c) 2021, Hooder <https://github.com/aHooder>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// This is a direct port to GLSL of Nvidia's PCSS implementation
// http://developer.download.nvidia.com/whitepapers/2008/PCSS_Integration.pdf

#define BASE_SUN_RADIUS_IN_RADIANS 0.004574217081268471
#define WORLD_SCALE 0.009278350515463918

#if PCF_KERNEL_SIZE <= 4
  const vec2 poissonDisk[4] = vec2[](
    vec2(-1.f, -1.f),
    vec2(1.f, 1.f),
    vec2(-1.f, 1.f),
    vec2(1.f, -1.f)
  );
#elif PCF_KERNEL_SIZE <= 16
  const vec2 poissonDisk[16] = vec2[](
    vec2(-0.94201624, -0.39906216),
    vec2(-0.094184101, -0.92938870),
    vec2(0.34495938, 0.29387760),
    vec2(-0.38277543, 0.27676845),
    vec2(0.94558609, -0.76890725),
    vec2(-0.91588581, 0.45771432),
    vec2(0.97484398, 0.75648379),
    vec2(-0.26496911, -0.41893023),
    vec2(-0.81544232, -0.87912464),
    vec2(0.44323325, -0.97511554),
    vec2(0.53742981, -0.47373420),
    vec2(-0.24188840, 0.99706507),
    vec2(-0.81409955, 0.91437590),
    vec2(0.14383161, -0.14100790),
    vec2(0.79197514, 0.19090188),
    vec2(0.19984126, 0.78641367)
  );
#elif PCF_KERNEL_SIZE <= 64
  const vec2 poissonDisk[64] = vec2[](
    vec2(0.645680, 0.493210),
    vec2(-0.299417, 0.791925),
    vec2(0.170019, -0.040254),
    vec2(-0.613392, 0.617481),
    vec2(0.421003, 0.027070),
    vec2(-0.651784, 0.717887),
    vec2(0.063326, 0.142369),
    vec2(0.977050, -0.108615),
    vec2(-0.705374, -0.668203),
    vec2(-0.817194, -0.271096),
    vec2(-0.667531, 0.326090),
    vec2(0.203528, 0.214331),
    vec2(0.039766, -0.396100),
    vec2(0.566637, 0.605213),
    vec2(-0.885922, 0.215369),
    vec2(-0.098422, -0.295755),
    vec2(0.078707, -0.715323),
    vec2(0.751946, 0.453352),
    vec2(-0.467574, -0.405438),
    vec2(0.222999, -0.215125),
    vec2(0.724479, -0.580798),
    vec2(-0.075838, -0.529344),
    vec2(0.354411, -0.887570),
    vec2(-0.248268, -0.814753),
    vec2(0.488876, -0.783441),
    vec2(-0.084078, 0.898312),
    vec2(0.487472, -0.063082),
    vec2(0.175817, 0.382366),
    vec2(-0.696890, -0.549791),
    vec2(0.470016, 0.217933),
    vec2(-0.016205, -0.872921),
    vec2(0.503098, -0.308878),
    vec2(0.034211, 0.979980),
    vec2(-0.149693, 0.605762),
    vec2(-0.146886, -0.859249),
    vec2(0.385784, -0.393902),
    vec2(0.464034, -0.188818),
    vec2(-0.688894, 0.007843),
    vec2(0.634388, -0.049471),
    vec2(0.643361, 0.164098),
    vec2(0.364483, 0.511704),
    vec2(-0.440840, 0.137486),
    vec2(0.678884, -0.204688),
    vec2(0.693960, -0.366253),
    vec2(0.099094, -0.308023),
    vec2(0.034028, 0.325968),
    vec2(0.145177, -0.898984),
    vec2(0.001801, 0.780328),
    vec2(-0.371868, 0.882138),
    vec2(-0.780145, 0.486251),
    vec2(0.315226, -0.604297),
    vec2(0.062655, -0.611866),
    vec2(-0.494552, -0.711051),
    vec2(0.200476, 0.494430),
    vec2(0.504440, 0.372295),
    vec2(-0.772454, -0.090976),
    vec2(-0.578845, -0.768792),
    vec2(0.612476, 0.705252),
    vec2(0.391522, 0.849605),
    vec2(0.155736, 0.065157),
    vec2(-0.178564, -0.596057),
    vec2(-0.545396, 0.538133),
    vec2(0.789239, -0.419965),
    vec2(-0.620106, -0.328104)
  );
#elif PCF_KERNEL_SIZE <= 128
  const vec2 poissonDisk[128] = vec2[](
    vec2( 0.0f, 0.0f ),
    vec2( 0.2776828465787964f, -0.9581511832485322f ),
    vec2( 0.9000879050490923f, 0.4307342479515026f ),
    vec2( -0.7647944196762058f, -0.6402701363653786f ),
    vec2( -0.17504772636159344f, 0.9620076933017032f ),
    vec2( -0.9407049158992247f, 0.24210653566774226f ),
    vec2( 0.9000261400809482f, -0.34581743949286636f ),
    vec2( 0.3207998395918985f, 0.49395371188041604f ),
    vec2( -0.2640879709468143f, -0.9127107990594386f ),
    vec2( -0.4838419215550383f, 0.52536226155206f ),
    vec2( 0.12809987457937014f, -0.47143895254724033f ),
    vec2( -0.6160881920382133f, -0.12413086451890126f ),
    vec2( 0.4670865224272747f, 0.0064872237519105f ),
    vec2( -0.35329094053260496f, -0.48241289232254236f ),
    vec2( 0.28542579341843494f, 0.9583110365525201f ),
    vec2( 0.6453800473431267f, -0.7606685179711868f ),
    vec2( -0.3427557804139637f, 0.18707451192353095f ),
    vec2( 0.6057870914972446f, 0.7471093088992898f ),
    vec2( -0.07199001456604193f, 0.5236425307121524f ),
    vec2( -0.9013363611294313f, -0.2565208373489353f ),
    vec2( 0.8115241152096051f, 0.10782671345731824f ),
    vec2( 0.46763704212811746f, -0.3315585929966629f ),
    vec2( 0.014237411436264863f, -0.7901450470766826f ),
    vec2( -0.12428813335859526f, -0.2841670607458079f ),
    vec2( 0.40067492291897533f, -0.6021018674790094f ),
    vec2( -0.7781613173711409f, 0.5803126262752815f ),
    vec2( 0.15625134904527882f, 0.21948190922253197f ),
    vec2( 0.5859981723555974f, 0.48364562144948997f ),
    vec2( -0.39949088181465336f, 0.8160375761571456f ),
    vec2( -0.6221638717227795f, 0.2216562455631862f ),
    vec2( 0.055986310257016454f, 0.7941539083015404f ),
    vec2( -0.3591030151508734f, -0.08849503590702003f ),
    vec2( 0.23652307900550487f, -0.1574880935720336f ),
    vec2( -0.5061576006126565f, -0.8145592996975489f ),
    vec2( -0.6069101814562218f, -0.41063585024597704f ),
    vec2( -0.987570474466288f, -0.01066022918545264f ),
    vec2( -0.08317747747642772f, 0.2363450120339737f ),
    vec2( 0.38607207948414846f, 0.26396480119872145f ),
    vec2( -0.12905108987457306f, -0.55098123214149f ),
    vec2( 0.6675229334872192f, -0.4865359581367079f ),
    vec2( 0.6775780409109635f, -0.17751443151170906f ),
    vec2( -0.26671411558454067f, 0.4021568322066524f ),
    vec2( 0.914103771766139f, -0.13482271587139452f ),
    vec2( 0.3453472293477034f, 0.753077345775246f ),
    vec2( 0.6542746861510271f, 0.264177098194282f ),
    vec2( 0.21247286147153444f, -0.7203350353092614f ),
    vec2( -0.46764320400066656f, -0.25818885120105795f ),
    vec2( -0.509771612547459f, -0.6049694134032992f ),
    vec2( -0.612556288167557f, 0.7421536550078723f ),
    vec2( 0.14364736535727643f, 0.5862118872420686f ),
    vec2( 0.44950081786835105f, -0.8128421519612484f ),
    vec2( -0.17760085414801077f, 0.7140505661779482f ),
    vec2( 0.06909961702868217f, -0.9813804787252409f ),
    vec2( 0.9264863669753384f, 0.25065135582814385f ),
    vec2( 0.06073034714156166f, 0.383195032563043f ),
    vec2( -0.7649531342293568f, 0.06325751249831023f ),
    vec2( -0.8816005020371989f, -0.4567291580612754f ),
    vec2( -0.17477883864598853f, -0.043207997612877955f ),
    vec2( -0.24393149420298488f, -0.7082253751328375f ),
    vec2( 0.027716199994669604f, -0.20319659870749135f ),
    vec2( -0.6774922929960937f, 0.41284296611414f ),
    vec2( 0.7598487230025347f, 0.5438592467441856f ),
    vec2( -0.47228860832063735f, 0.32144841057127127f ),
    vec2( 0.0925448471115481f, 0.9903799661585032f ),
    vec2( 0.057819497987506976f, -0.6272066479926046f ),
    vec2( 0.20331287883805488f, 0.03110924352619657f ),
    vec2( 0.41378144114161164f, -0.17178821026468188f ),
    vec2( 0.5326501493347379f, 0.15828552231590337f ),
    vec2( -0.33911799491840744f, 0.6260718520287533f ),
    vec2( 0.9803671290825744f, 0.06017664379136065f ),
    vec2( -0.7516282360540775f, -0.20871409462839022f ),
    vec2( -0.48154096453303297f, 0.054070424507599725f ),
    vec2( -0.8703212891412067f, 0.4290527102665999f ),
    vec2( 0.2953888418499818f, -0.4058883536426045f ),
    vec2( 0.3624620535203386f, 0.11861724557506687f ),
    vec2( 0.7674139784146506f, -0.6399999599776616f ),
    vec2( 0.6675669884254399f, -0.016812426192861128f ),
    vec2( -0.7856719602336678f, 0.24037936809602975f ),
    vec2( 0.2172797546066605f, 0.3712530385231081f ),
    vec2( 0.8184521870579236f, -0.46475550573208896f ),
    vec2( 0.7255627162254492f, -0.3353639617542128f ),
    vec2( 0.4892078029375101f, 0.6257552145438993f ),
    vec2( -0.012142037916330091f, -0.39709899954035993f ),
    vec2( 0.4352384185583041f, 0.8897184845495766f ),
    vec2( 0.2065715291616968f, 0.8026308269322607f ),
    vec2( -0.1861580831768746f, 0.11142839349332324f ),
    vec2( 0.5640231181373067f, -0.6101712906299919f ),
    vec2( -0.04048263273027108f, 0.8997097469346004f ),
    vec2( 0.7471978261068026f, 0.3814370244258464f ),
    vec2( -0.09697150806188023f, -0.9864147374230248f ),
    vec2( -0.3099182083760867f, -0.2385028429655584f ),
    vec2( -0.7867821886713768f, -0.06730787169899397f ),
    vec2( 0.5267520033767665f, 0.3464389417602019f ),
    vec2( 0.24364027511274636f, -0.5742249693083287f ),
    vec2( -0.6258188658194495f, -0.7116105590503781f ),
    vec2( 0.3362176492510715f, -0.051784070103922296f ),
    vec2( -0.33195051041402956f, 0.04625233291855995f ),
    vec2( 0.16262103659881422f, -0.3156385572880543f ),
    vec2( -0.09531164196887894f, -0.7011357385994619f ),
    vec2( -0.7417231755024045f, -0.4805973055468406f ),
    vec2( 0.1684511041830814f, -0.8737397974559775f ),
    vec2( -0.22314464666425216f, -0.39282210593120515f ),
    vec2( 0.47815136552319965f, -0.4856966541644582f ),
    vec2( 0.04916025757538011f, 0.12880476042706693f ),
    vec2( -0.6293251141397334f, 0.0847695991922651f ),
    vec2( -0.36875392416288f, -0.6271488992501402f ),
    vec2( -0.006882589871698563f, 0.6439521167585137f ),
    vec2( -0.9000066904106291f, 0.09983637346825279f ),
    vec2( -0.3072684384367857f, 0.9296786045344324f ),
    vec2( 0.398257784671085f, 0.39151292560774953f ),
    vec2( -0.4748468147659813f, -0.3941055725451455f ),
    vec2( 0.7972300587063822f, -0.05711321954389967f ),
    vec2( 0.5215811179207299f, -0.10904566269946289f ),
    vec2( 0.7297686815229065f, 0.6687156778200071f ),
    vec2( -0.4672350986300394f, 0.6932246977755632f ),
    vec2( -0.6119809823139521f, 0.5273841360552485f ),
    vec2( -0.7968246426038668f, -0.34466896811103614f ),
    vec2( 0.7870753146982199f, 0.2545183441430666f ),
    vec2( 0.8161599449450968f, -0.24569847110772497f ),
    vec2( -0.3736368485475518f, -0.7800806970473738f ),
    vec2( -0.14247401002111976f, -0.8447758857521939f ),
    vec2( 0.3447210622093636f, 0.6186880593992792f ),
    vec2( -0.14088938162449283f, 0.36123157485047436f ),
    vec2( -0.21976116241687615f, 0.24070873430158055f ),
    vec2( -0.22588850782201939f, 0.5195560648790438f ),
    vec2( -0.07613701430588123f, -0.11604356393617225f ),
    vec2( 0.10255073637365403f, -0.09239203645483911f ),
    vec2( 0.5978303245161929f, -0.3075782685888358f )
  );
#else
  const vec2 poissonDisk[256] = vec2[](
    vec2( 0.0f, 0.0f ),
    vec2( -0.3761066246593409f, -0.91886297223588f ),
    vec2( 0.9897750234407704f, 0.11190048316850716f ),
    vec2( -0.8982136075087894f, 0.4245194103215865f ),
    vec2( 0.09952611006482748f, 0.9943854301176698f ),
    vec2( 0.42509490258285465f, -0.5953527878686481f ),
    vec2( -0.724085615563168f, -0.30032798029416025f ),
    vec2( 0.48790453943008727f, 0.5330280905583493f ),
    vec2( -0.36307606101008216f, 0.6214835217390974f ),
    vec2( -0.42613868808689104f, 0.1651777522935288f ),
    vec2( -0.20225546284025592f, -0.45366900265129767f ),
    vec2( 0.8957983035888156f, -0.4140788942815825f ),
    vec2( 0.5401935001228995f, -0.04563296728950264f ),
    vec2( 0.07774593594812586f, -0.8698036404879642f ),
    vec2( 0.052132618436315774f, 0.5173733200443507f ),
    vec2( 0.2953634356724165f, 0.22691805610741522f ),
    vec2( -0.9942195078523033f, 0.033469084150035355f ),
    vec2( -0.6883071201600676f, -0.6676618711456487f ),
    vec2( 0.8655098485965931f, 0.4081626498701192f ),
    vec2( -0.40697319606463095f, -0.16105073969000727f ),
    vec2( 0.2699441535969115f, -0.2852688440751495f ),
    vec2( -0.7038260662784616f, 0.655609055242597f ),
    vec2( 0.38426061592403593f, 0.8744320135826088f ),
    vec2( 0.08076547846479705f, -0.4972690042710048f ),
    vec2( -0.24952796477691755f, 0.9556675799902079f ),
    vec2( 0.3900167337350918f, -0.8985306617142602f ),
    vec2( -0.6661053200674921f, 0.013436588280083513f ),
    vec2( 0.7087535421182418f, -0.5926655623219614f ),
    vec2( -0.014609737511984336f, 0.2625646201600838f ),
    vec2( 0.6990804646982579f, 0.15943781702573173f ),
    vec2( 0.7376180615788964f, 0.66442510489104f ),
    vec2( 0.595610368974689f, -0.3027329915541213f ),
    vec2( -0.47914067719118886f, -0.419170987830493f ),
    vec2( -0.4722143444991018f, 0.8464861699022034f ),
    vec2( -0.1347586623608179f, -0.9891940541354529f ),
    vec2( -0.1414796375709036f, -0.7125130452974154f ),
    vec2( -0.5835885865716446f, 0.40164236405899467f ),
    vec2( 0.7938026875778342f, -0.12305535669649377f ),
    vec2( -0.39536717272305355f, -0.6636343728627033f ),
    vec2( -0.102221208009479f, 0.718777062477666f ),
    vec2( -0.0871622569644173f, -0.23920886287469023f ),
    vec2( -0.8123440564721972f, 0.21592954462262293f ),
    vec2( -0.257741438800995f, 0.3589454671456078f ),
    vec2( 0.31133285988148557f, -0.05986918240994117f ),
    vec2( 0.2766973922062863f, 0.6330653723438326f ),
    vec2( -0.2190490512810824f, -0.04358300069936171f ),
    vec2( 0.5984771304536527f, -0.7819818697587891f ),
    vec2( -0.9132233901020173f, -0.20256900598845023f ),
    vec2( 0.504584362841612f, 0.22808613449534101f ),
    vec2( 0.20162869210451628f, -0.6978417869059799f ),
    vec2( -0.5223582379835324f, -0.811559300983341f ),
    vec2( 0.11261612262079207f, 0.7964948510660966f ),
    vec2( 0.3181989316610826f, 0.43408712892893453f ),
    vec2( 0.9656474386329417f, -0.24254295019383548f ),
    vec2( 0.5849900515300641f, 0.8023450127207232f ),
    vec2( 0.6641503905955156f, 0.3528341206327031f ),
    vec2( 0.11802835205987472f, -0.19068867329215883f ),
    vec2( 0.18565833118969535f, 0.0692725010836721f ),
    vec2( 0.4071366121062325f, -0.39240202206108293f ),
    vec2( -0.9101120854574766f, -0.39303563483333004f ),
    vec2( -0.21301016154023114f, 0.15523019357057619f ),
    vec2( -0.41865426573259873f, 0.40051252040463975f ),
    vec2( -0.5750236287931878f, -0.1519897564411905f ),
    vec2( 0.4327027301824889f, -0.2026443355526047f ),
    vec2( -0.5321638697554736f, 0.6011114406759879f ),
    vec2( 0.8570196437798249f, 0.2334609349434049f ),
    vec2( -0.276129370415865f, 0.7720885046153172f ),
    vec2( 0.17120218425553513f, 0.34480847685373217f ),
    vec2( -0.1225102638324593f, 0.4922719409798585f ),
    vec2( 0.25445841776897316f, -0.51137730515137f ),
    vec2( -0.6591991265513621f, -0.46652990650585396f ),
    vec2( -0.636761933962498f, 0.21676571730732663f ),
    vec2( 0.996360998521903f, -0.07484963374653639f ),
    vec2( -0.25478998612692527f, -0.2664199336397408f ),
    vec2( 0.4460075419337824f, 0.7277984622135499f ),
    vec2( -0.07435639285990621f, 0.9959173769338053f ),
    vec2( 0.39501517633015554f, 0.08994118354670004f ),
    vec2( -0.03374898852409562f, -0.4041081513335442f ),
    vec2( -0.8399856830428778f, -0.05518254018235227f ),
    vec2( 0.008263580098164173f, -0.6466153866747625f ),
    vec2( 0.7494122968037875f, 0.020030511062092998f ),
    vec2( 0.2515770142433657f, -0.8509090579283612f ),
    vec2( -0.8205676474969797f, -0.547568841415329f ),
    vec2( -0.7466613447565196f, 0.4863480941210927f ),
    vec2( 0.6494943524095635f, 0.5085573551162018f ),
    vec2( -0.39928964302600617f, -0.527769860174642f ),
    vec2( -0.5075721883623237f, 0.030582286808326215f ),
    vec2( 0.2579255493673118f, 0.962727661689918f ),
    vec2( 0.40643694159227584f, 0.32254237246459366f ),
    vec2( -0.06526343827120264f, -0.8593218223748604f ),
    vec2( -0.7557485978968935f, 0.34411467274400903f ),
    vec2( 0.19456667239564535f, 0.47921895534843323f ),
    vec2( 0.754709869001452f, -0.31126137165814566f ),
    vec2( 0.5580000578610492f, -0.4881370960473965f ),
    vec2( -0.28297491255254204f, -0.7694068983301031f ),
    vec2( 0.6399467166728713f, -0.16629499765358197f ),
    vec2( 0.05858994409440929f, 0.12952972644046423f ),
    vec2( -0.3435288159813995f, 0.05442298923061666f ),
    vec2( 0.44484167544127606f, -0.7455804688560417f ),
    vec2( 0.14601574119741234f, -0.36031346322374536f ),
    vec2( -0.07373566398658679f, 0.854289734868636f ),
    vec2( -0.49826133429683844f, -0.2768654567972838f ),
    vec2( -0.9512739652005529f, 0.17199523037190417f ),
    vec2( 0.1478137946738225f, 0.6619883733215131f ),
    vec2( -0.3602374818425055f, -0.3640896195390199f ),
    vec2( -0.2097492476841648f, 0.6167960635179832f ),
    vec2( -0.25192534229724145f, -0.5876636648270169f ),
    vec2( -0.5425599752820552f, -0.5972142710808351f ),
    vec2( -0.10369719436987748f, -0.561666192072417f ),
    vec2( -0.5958536493144547f, 0.7778138343946134f ),
    vec2( 0.5636927116521935f, 0.6580813839189597f ),
    vec2( 0.7892250132221333f, 0.5243131204341709f ),
    vec2( -0.2087644896227177f, -0.8799067700508273f ),
    vec2( -0.6402158613078259f, 0.5485240261611112f ),
    vec2( 0.28161326118411156f, 0.7928364152598624f ),
    vec2( 0.5326910210156278f, 0.37199568480979645f ),
    vec2( 0.5693186737079998f, 0.11152247346067794f ),
    vec2( 0.5709524021455243f, -0.6436541797813206f ),
    vec2( -0.585636051369315f, -0.3614511277846535f ),
    vec2( 0.6909917031278633f, -0.4370729789511192f ),
    vec2( -0.05695633016234369f, 0.5993946554541387f ),
    vec2( -0.7066396037317078f, -0.12757625426413624f ),
    vec2( -0.12298590211273244f, 0.34526577877731185f ),
    vec2( -0.09053417282921512f, 0.09715109427398037f ),
    vec2( 0.1863542188505715f, -0.05375691717095668f ),
    vec2( -0.09639848630950189f, -0.10257158910634849f ),
    vec2( 0.8740847460193558f, 0.05361035342896908f ),
    vec2( 0.0196731754690594f, 0.38959355093194636f ),
    vec2( 0.1300521317606855f, -0.9849294840650189f ),
    vec2( 0.025003554963055244f, 0.6877855008256396f ),
    vec2( 0.7749544786716299f, 0.315663103927566f ),
    vec2( -0.3488864785009262f, 0.28107122641446747f ),
    vec2( -0.4323148235641279f, 0.7279872213319034f ),
    vec2( -0.46117062116298835f, 0.497811048379714f ),
    vec2( -0.007048169656067868f, -0.9920025188771618f ),
    vec2( -0.7949359676484395f, 0.07223384883980206f ),
    vec2( -0.3336319154374538f, 0.49444655744747745f ),
    vec2( -0.9289260013686997f, 0.3068585496015475f ),
    vec2( 0.3170232071913095f, -0.6829573877821594f ),
    vec2( 0.12455182888596646f, 0.23414811790913131f ),
    vec2( -0.8293770045119817f, -0.3095252482383978f ),
    vec2( 0.6320893726820462f, 0.24792241699191908f ),
    vec2( -0.36129715462975065f, 0.9054089192361442f ),
    vec2( 0.36369439227350936f, 0.5388790533378004f ),
    vec2( -0.4880496903270554f, 0.27500769515631407f ),
    vec2( 0.036709847360362736f, -0.3160659793844315f ),
    vec2( -0.9538813640735925f, -0.09504643591033686f ),
    vec2( 0.31126397958829183f, -0.18018605571640348f ),
    vec2( -0.40965411751332453f, -0.799960041152138f ),
    vec2( 0.4283595201987853f, -0.04787369900206065f ),
    vec2( 0.9382858114940232f, 0.3184062693157462f ),
    vec2( 0.15815763533441765f, -0.58483405072004f ),
    vec2( 0.67547622724568f, -0.05482512161575687f ),
    vec2( 0.24487220877700502f, -0.9637538403611203f ),
    vec2( -0.18679247680413197f, 0.8620422499084934f ),
    vec2( -0.3272247604953803f, -0.06631032160031214f ),
    vec2( 0.5005866046553754f, -0.8451132520595647f ),
    vec2( 0.7343334893086596f, 0.43292335287758704f ),
    vec2( 0.10911899787532767f, -0.7427908201450732f ),
    vec2( -0.7113776557891113f, -0.5595039249380095f ),
    vec2( 0.8989687866670797f, -0.16087815286226292f ),
    vec2( 0.8056149829188567f, -0.4875275618980147f ),
    vec2( 0.29812748721801874f, -0.41986462237682326f ),
    vec2( 0.8622712099417815f, -0.2863162578531633f ),
    vec2( -0.5928897996634928f, -0.7285465070241315f ),
    vec2( 0.015928406128446745f, -0.11148808151865566f ),
    vec2( -0.6526213964015445f, 0.31831794072169084f ),
    vec2( -0.2346281747119423f, -0.15432488989304596f ),
    vec2( -0.7610674658806115f, -0.2106367641295097f ),
    vec2( -0.49722996424368876f, -0.6887342873505711f ),
    vec2( -0.7657288809522336f, -0.4112594439308501f ),
    vec2( 0.3353787546619841f, -0.7865360265503787f ),
    vec2( -0.1792047922047291f, -0.3515217971825726f ),
    vec2( 0.043543286552583355f, 0.8935348797632642f ),
    vec2( 0.4343751904295216f, 0.62372742277749f ),
    vec2( -0.3204112736491429f, 0.1586316471269553f ),
    vec2( 0.4601766212483708f, -0.5043021769854474f ),
    vec2( 0.5169774489777325f, -0.3979179431086552f ),
    vec2( 0.2939311452893993f, 0.06169388962253263f ),
    vec2( 0.7002629483283647f, -0.705817158886283f ),
    vec2( -0.2208236514408929f, 0.45347221381405245f ),
    vec2( -0.04617830568633009f, -0.7568596261553974f ),
    vec2( -0.13008975089554717f, 0.229020144564055f ),
    vec2( -0.5435804445416447f, 0.11461130154603082f ),
    vec2( 0.39145551233578874f, 0.19866265068425465f ),
    vec2( 0.32852726947002847f, -0.5757955244552262f ),
    vec2( -0.31727024406270427f, -0.4710360807859579f ),
    vec2( -0.7948969161095807f, 0.5745250483205228f ),
    vec2( -0.4302961626234526f, -0.0435965325932701f ),
    vec2( -0.8792654974665939f, 0.03004136740146289f ),
    vec2( 0.47046208034998893f, -0.29117557742732275f ),
    vec2( -0.1411245917128953f, 0.005009675228882852f ),
    vec2( 0.6387213264584751f, 0.7201339085624074f ),
    vec2( 0.2646469225363589f, 0.35453009712465644f ),
    vec2( -0.6346066627263903f, -0.24151066358061418f ),
    vec2( -0.014426473697134044f, -0.526070840476314f ),
    vec2( 0.4243821607005836f, 0.4264997514958516f ),
    vec2( 0.16912669650988874f, 0.9012653352058636f ),
    vec2( 0.7851613797246549f, -0.21612273144198788f ),
    vec2( -0.3933966423917764f, -0.2617097667850896f ),
    vec2( -0.5940611915029308f, -0.05099116789729768f ),
    vec2( 0.17136610882819095f, -0.899210455415703f ),
    vec2( -0.23637532713450554f, 0.2672829736896747f ),
    vec2( -0.7721009324239687f, -0.6347073997873958f ),
    vec2( -0.6052341917441804f, 0.6796505286698732f ),
    vec2( -0.37207353156597917f, 0.8114673803209792f ),
    vec2( -0.5171994169478028f, -0.5008645593321563f ),
    vec2( 0.47549159854926915f, 0.8570013485078323f ),
    vec2( 0.5082678927510081f, -0.14400820902927144f ),
    vec2( 0.19278361140299252f, -0.4404908586005982f ),
    vec2( 0.6211915545136646f, 0.03573409363790507f ),
    vec2( 0.9705358264937772f, 0.22148999101410408f ),
    vec2( 0.021768460570150656f, 0.7869121844771515f ),
    vec2( 0.5713639539217524f, 0.5388313891855624f ),
    vec2( -0.23873004600268014f, -0.6865141635010567f ),
    vec2( -0.7326274766634516f, 0.1630891175771686f ),
    vec2( 0.19964320070510005f, 0.17408721804944904f ),
    vec2( 0.8920308990190949f, -0.048630372270746874f ),
    vec2( -0.8405596780590819f, 0.49702934305026075f ),
    vec2( -0.004426246532187802f, -0.20378599256966587f ),
    vec2( 0.330177615579303f, 0.14515119265847565f ),
    vec2( 0.14845925583171202f, 0.5629036350951623f ),
    vec2( 0.3547782364540958f, 0.7216187356990955f ),
    vec2( 0.7934418800932452f, -0.39671688614824013f ),
    vec2( -0.27481777369746213f, 0.869786989302097f ),
    vec2( 0.6802920704245515f, -0.2657637391410523f ),
    vec2( 0.7971449414126897f, 0.12512818377838347f ),
    vec2( -0.9177088097700662f, -0.30428486461714577f ),
    vec2( 0.11450919387152798f, 0.4214209937442685f ),
    vec2( -0.20293940494911888f, 0.7018788876549726f ),
    vec2( -0.6498323802238716f, 0.1159751050196211f ),
    vec2( 0.10614080780317496f, -0.07673599593297349f ),
    vec2( 0.5809314616104793f, 0.4516837242738493f ),
    vec2( 0.1974005982282815f, 0.7720870461408994f ),
    vec2( -0.1785889893450168f, -0.7972948266663358f ),
    vec2( 0.6756864494069983f, 0.597957992695498f ),
    vec2( 0.38530099188157463f, -0.2860235666132845f ),
    vec2( -0.5657488538463055f, 0.4984548595535527f ),
    vec2( 0.26289483340572306f, 0.5388430448084727f ),
    vec2( -0.5539718613776587f, 0.20125663284291365f ),
    vec2( 0.5338270450574109f, -0.5693180694823381f ),
    vec2( 0.9046537207580503f, 0.1578706088663051f ),
    vec2( -0.2580942221156995f, 0.5456854155184435f ),
    vec2( -0.32936683117231186f, 0.40984784295314125f ),
    vec2( -0.8472285742254904f, -0.4606351081401634f ),
    vec2( -0.718922876845771f, 0.24636041924339053f ),
    vec2( -0.2712118850953482f, -0.9512965654353825f ),
    vec2( -0.32479077940588913f, -0.19022985780178808f ),
    vec2( 0.20138822183777041f, -0.16022610928003037f ),
    vec2( 0.11972909571991831f, 0.011617222230856308f ),
    vec2( -0.024525777675205227f, 0.15735627441583122f ),
    vec2( 0.22217298736767285f, 0.27392691274591074f ),
    vec2( -0.3043840215626944f, -0.8545046658133085f ),
    vec2( -0.8319773575113583f, 0.30343270872186545f ),
    vec2( -0.24394431528366095f, 0.06390822285260957f ),
    vec2( -0.30972106926967236f, 0.6881124923908317f )
  );
#endif

float PCSS(sampler2D shadowMap, vec3 coords, vec2 planeBias, vec2 zScale, vec2 texelSize) {
  vec2 uv = coords.xy;
  float zReceiver = coords.z;

  // Same as bias calculation in shadows.glsl
  vec2 texelUv = mod(coords.xy, texelSize);
  vec2 toCenter = texelSize / 2.f - texelUv;

  // tan(0) = 0, tan(PI / 2) = inf
  float sunSize = tan(shadowSunScale * BASE_SUN_RADIUS_IN_RADIANS);

  // STEP 1: blocker search
  float blockerSum = 0;
  float numBlockers = 0;

  vec2 searchArea = sunSize * zReceiver * zScale;

  for (int i = 0; i < PCF_KERNEL_SIZE; i++) {
    vec2 offset = poissonDisk[i] * searchArea;
    float zBlocker = texture(shadowMap, uv + offset).r;

    vec2 wholeTexelOffset = floor(offset / texelSize) * texelSize; // floor to whole-texel multiple
    zBlocker -= planeBias.x * wholeTexelOffset.x + planeBias.y * wholeTexelOffset.y;

    if (zBlocker < zReceiver) {
      blockerSum += zBlocker;
      numBlockers++;
    }
  }

//  return numBlockers / 4.f;
  if (numBlockers < 1)
    return 0.f; //There are no occluders so early out (this saves filtering)
  float avgBlockerDepth = blockerSum / numBlockers;

  // STEP 2: penumbra size
  // https://developer.download.nvidia.com/shaderlibrary/docs/shadow_PCSS.pdf page 3
  float penumbraRatio = (zReceiver - avgBlockerDepth) / avgBlockerDepth;
  vec2 filterScale = penumbraRatio * sunSize * zScale;

  // STEP 3: filtering
  float sum = 0.f;
  for (int i = 0; i < PCF_KERNEL_SIZE; i++) {
    vec2 offset = poissonDisk[i] * filterScale;
    float zBlocker = texture(shadowMap, uv + offset).r;

    vec2 wholeTexelOffset = floor(offset / texelSize) * texelSize; // floor to whole-texel multiple
    zBlocker -= planeBias.x * wholeTexelOffset.x + planeBias.y * wholeTexelOffset.y;

    sum += zBlocker < zReceiver ? 1.f : 0.f;
  }
  return sum / float(PCF_KERNEL_SIZE);
}